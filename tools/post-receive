#!/usr/bin/python
#
# Humbug's post-receive hook.  Deploy it by symlinking it to
# /srv/git/humbug.git/hooks/post-receive
#
# The "post-receive" script is run after receive-pack has accepted a pack
# and the repository has been updated.  It is passed arguments in through
# stdin in the form
#  <oldrev> <newrev> <refname>
# For example:
#  aa453216d1b3e49e7f6f98441fa56946ddcd6a20 68f7abf4e6f922807889f52bc043ecd31b79f814 refs/heads/master
#
# see contrib/hooks/ for a sample

import os
import sys
import subprocess
import time

sys.path.append(os.path.dirname(os.path.dirname(os.readlink(__file__))))
import api.common
client = api.common.HumbugAPI(email="humbug+commits@humbughq.com",
                              api_key="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                              verbose=False)

def check_output(*popenargs, **kwargs):
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise subprocess.CalledProcessError(retcode, cmd, output=output)
    return output
subprocess.check_output = check_output

def update_deployment(oldrev, newrev, refname):
    subprocess.check_call(["ssh", "app.humbughq.com", "--", "env", "-u", "GIT_DIR",
                           "/home/humbug/humbug/tools/update-deployment",
                           oldrev, newrev, refname])

def send_bot_message(oldrev, newrev, refname):
    commit_text = ('`%s` was deployed to `%s` with:\n\n'
        % (newrev[:12], refname.replace("refs/heads/", "")))
    log_cmd = ["git", "log", "--reverse", "--pretty=!gravatar(%aE) %s", "%s..%s" % (oldrev, newrev)]
    commit_text += subprocess.check_output(log_cmd)

    message_data = {
        "type": "stream",
        "stream": "test" if refname == "refs/heads/test-post-receive" else "devel",
        "subject": "commits",
        "content": commit_text,
        "recipient": "tabbott@humbughq.com",
    }
    # Sleep a bit to give time for the server to restart.
    # TODO: Make this work without the sleep
    time.sleep(1)
    client.send_message(message_data)

for ln in sys.stdin:
    oldrev, newrev, refname = ln.strip().split()
    if refname in ["refs/heads/master", "refs/heads/test-post-receive"]:
        update_deployment(oldrev, newrev, refname)
        send_bot_message(oldrev, newrev, refname)
